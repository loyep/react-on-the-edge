// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id      String @id @default(cuid())
    title   String
    content String
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    balanceId     String
    Balance       Balance?
    chatLogs      ChatLog[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model App {
    id          String   @id @default(cuid())
    name        String
    status      String
    role        String
    userId      String
    cover       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    preset      String?  @db.Text
    description String?
    public      Boolean  @default(false)
}

model SensitiveWord {
    id        String   @id @default(cuid())
    word      String   @unique
    count     Int      @default(0)
    active    Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Balance {
    id        String   @id @default(cuid())
    userId    String   @unique
    amount    Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    User      User     @relation(fields: [userId], references: [id])
}

model ChatLog {
    id        String   @id @default(cuid())
    userId    String
    content   String
    type      String   @default("text")
    prompt    String   @db.Text
    answer    String   @db.Text
    groupId   String?
    appId     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    User      User     @relation(fields: [userId], references: [id])
}

model ChatGptKey {
    id        String   @id @default(cuid())
    key       String   @unique
    status    Boolean  @default(true)
    model     String
    balance   Decimal  @default(0) @db.Decimal(10, 2)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
